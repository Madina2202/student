"use strict";
import { jsx, jsxs } from "react/jsx-runtime";
import { request } from "@umijs/max";
import { Button, Form, Input, message, Modal, Popconfirm, Select, Space, Table } from "antd";
import { useEffect, useState } from "react";
export default function HomePage() {
  const [dataSource, setDataSource] = useState([]);
  const [groupOptions, setGroupOptions] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [formEdit] = Form.useForm();
  const loadStudents = () => {
    request("http://localhost:8000/api/Student/GetAll", { method: "GET" }).then((result) => {
      setDataSource(result);
    }).catch(() => message.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u0441\u0442\u0443\u0434\u0435\u043D\u0442\u043E\u0432"));
  };
  const loadGroups = () => {
    request("/api/Group/GetAll", { method: "GET" }).then((result) => {
      const options = result.map((item) => ({
        value: String(item.id),
        // ⚠ string
        label: item.name
      }));
      setGroupOptions(options);
    });
  };
  useEffect(() => {
    loadStudents();
    loadGroups();
  }, []);
  const updateData = (values) => {
    const searchDto = {
      groupId: values.groupId || "-1",
      // -1 если не выбрано
      lastname: values.lastname || "",
      firstname: values.firstname || "",
      midname: values.midname || "",
      email: values.email || ""
    };
    request("http://localhost:8000/api/Student/FindUsers", {
      method: "POST",
      data: searchDto
    }).then((result) => {
      setDataSource(result);
    }).catch(() => message.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u043E\u0438\u0441\u043A\u0430 \u0441\u0442\u0443\u0434\u0435\u043D\u0442\u043E\u0432"));
  };
  const onRemove = (studentId) => {
    request(`/api/Student/Delete?id=${studentId}`, {
      method: "DELETE"
    }).then(() => {
      setDataSource((prev) => prev.filter((item) => item.id !== studentId));
      message.success("\u0421\u0442\u0443\u0434\u0435\u043D\u0442 \u0443\u0434\u0430\u043B\u0451\u043D");
    }).catch(() => message.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0438"));
  };
  const onStudentAdd = (values) => {
    const dataToSend = {
      lastname: values.lastname,
      firstname: values.firstname,
      midname: values.midname,
      email: values.email,
      password: values.password,
      groupId: String(values.groupId)
    };
    request("api/Student/Add", { method: "PUT", data: dataToSend }).then(() => {
      setIsModalOpen(false);
      loadStudents();
      message.success("\u041D\u043E\u0432\u044B\u0439 \u0441\u0442\u0443\u0434\u0435\u043D\u0442 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D");
    }).catch(() => message.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u0438"));
  };
  const onStudentEdit = (values) => {
    const dataToSend = {
      id: values.id,
      lastname: values.lastname,
      firstname: values.firstname,
      midname: values.midname,
      email: values.email,
      password: values.password,
      groupId: String(values.groupId)
    };
    request("api/Student/Post", { method: "POST", data: dataToSend }).then(() => {
      setIsModalOpen(false);
      loadStudents();
      message.success("\u0414\u0430\u043D\u043D\u044B\u0435 \u0441\u0442\u0443\u0434\u0435\u043D\u0442\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u044B");
    }).catch(() => message.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0438"));
  };
  const onEdit = (id) => {
    request(`/api/Student/Get?id=${id}`, { method: "GET" }).then((result) => {
      formEdit.setFieldsValue(result);
      setIsModalOpen(true);
    });
  };
  const columns = [
    { title: "Id", dataIndex: "id" },
    { title: "\u0424\u0430\u043C\u0438\u043B\u0438\u044F", dataIndex: "lastname" },
    { title: "\u0418\u043C\u044F", dataIndex: "firstname" },
    { title: "\u041E\u0442\u0447\u0435\u0441\u0442\u0432\u043E", dataIndex: "midname" },
    { title: "E-mail", dataIndex: "email" },
    { title: "\u0413\u0440\u0443\u043F\u043F\u0430", dataIndex: "groupName" },
    {
      title: "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044F",
      key: "action",
      render: (_, record) => /* @__PURE__ */ jsxs(Space, { children: [
        /* @__PURE__ */ jsx(
          Popconfirm,
          {
            title: "\u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B?",
            okText: "\u0414\u0430",
            cancelText: "\u041D\u0435\u0442",
            onConfirm: () => onRemove(record.id),
            children: /* @__PURE__ */ jsx("a", { children: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C" })
          }
        ),
        /* @__PURE__ */ jsx(Button, { type: "link", onClick: () => onEdit(record.id), children: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C" })
      ] })
    }
  ];
  return /* @__PURE__ */ jsxs("div", { children: [
    /* @__PURE__ */ jsxs(Form, { layout: "inline", onFinish: updateData, children: [
      /* @__PURE__ */ jsx(Form.Item, { name: "groupId", label: "\u0413\u0440\u0443\u043F\u043F\u0430", children: /* @__PURE__ */ jsx(Select, { allowClear: true, options: groupOptions, style: { width: "200px" } }) }),
      /* @__PURE__ */ jsx(Form.Item, { name: "lastname", label: "\u0424\u0430\u043C\u0438\u043B\u0438\u044F", children: /* @__PURE__ */ jsx(Input, {}) }),
      /* @__PURE__ */ jsx(Form.Item, { name: "firstname", label: "\u0418\u043C\u044F", children: /* @__PURE__ */ jsx(Input, {}) }),
      /* @__PURE__ */ jsx(Form.Item, { name: "midname", label: "\u041E\u0442\u0447\u0435\u0441\u0442\u0432\u043E", children: /* @__PURE__ */ jsx(Input, {}) }),
      /* @__PURE__ */ jsx(Form.Item, { name: "email", label: "E-mail", children: /* @__PURE__ */ jsx(Input, {}) }),
      /* @__PURE__ */ jsx(Button, { type: "primary", htmlType: "submit", children: "\u041D\u0430\u0439\u0442\u0438" })
    ] }),
    /* @__PURE__ */ jsx(
      Button,
      {
        type: "primary",
        onClick: () => {
          formEdit.resetFields();
          setIsModalOpen(true);
        },
        style: { margin: "16px 0" },
        children: "\u041D\u043E\u0432\u044B\u0439 \u0441\u0442\u0443\u0434\u0435\u043D\u0442"
      }
    ),
    /* @__PURE__ */ jsx(
      Modal,
      {
        title: "\u0421\u043E\u0437\u0434\u0430\u043D\u0438\u0435 / \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435 \u0441\u0442\u0443\u0434\u0435\u043D\u0442\u0430",
        open: isModalOpen,
        onCancel: () => setIsModalOpen(false),
        footer: null,
        children: /* @__PURE__ */ jsxs(
          Form,
          {
            form: formEdit,
            layout: "horizontal",
            labelCol: { span: 6 },
            onFinish: (values) => {
              if (values.id) {
                onStudentEdit(values);
              } else {
                onStudentAdd(values);
              }
            },
            children: [
              /* @__PURE__ */ jsx(Form.Item, { name: "id", hidden: true, children: /* @__PURE__ */ jsx(Input, {}) }),
              /* @__PURE__ */ jsx(Form.Item, { name: "lastname", label: "\u0424\u0430\u043C\u0438\u043B\u0438\u044F", rules: [{ required: true }], children: /* @__PURE__ */ jsx(Input, {}) }),
              /* @__PURE__ */ jsx(Form.Item, { name: "firstname", label: "\u0418\u043C\u044F", rules: [{ required: true }], children: /* @__PURE__ */ jsx(Input, {}) }),
              /* @__PURE__ */ jsx(Form.Item, { name: "midname", label: "\u041E\u0442\u0447\u0435\u0441\u0442\u0432\u043E", children: /* @__PURE__ */ jsx(Input, {}) }),
              /* @__PURE__ */ jsx(Form.Item, { name: "email", label: "E-mail", rules: [{ type: "email" }], children: /* @__PURE__ */ jsx(Input, {}) }),
              /* @__PURE__ */ jsx(Form.Item, { name: "password", label: "\u041F\u0430\u0440\u043E\u043B\u044C", children: /* @__PURE__ */ jsx(Input.Password, {}) }),
              /* @__PURE__ */ jsx(Form.Item, { name: "groupId", label: "\u0413\u0440\u0443\u043F\u043F\u0430", children: /* @__PURE__ */ jsx(Select, { allowClear: true, options: groupOptions }) }),
              /* @__PURE__ */ jsx(Form.Item, { children: /* @__PURE__ */ jsx(Button, { type: "primary", htmlType: "submit", children: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C" }) })
            ]
          }
        )
      }
    ),
    /* @__PURE__ */ jsx(Table, { rowKey: "id", dataSource, columns })
  ] });
}
